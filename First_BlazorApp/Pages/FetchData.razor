@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>
<input type="text" @bind="@Sity"/>
<button @onclick="GetWeatherForecast">Search</button>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    var today = DateTime.Today;
    <h4>@Sity: @today.ToShortDateString()</h4>
    <p>Wind:@forecasts.Wind</p>
    <p>Temp (C):@forecasts.Temperature</p>
    <p>Summary:@forecasts.Description</p>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Wind</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts.Forecast)
            {
                <tr>
                    <td>@today.AddDays(int.Parse(forecast.Day)).ToShortDateString()</td>
                    <td>@forecast.Temperature</td>
                    <td>@forecast.Wind</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast? forecasts;
    private string Sity  = "Berlin";

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast>(Sity);
    }
    public partial class WeatherForecast : Forecast
    {
        public string? Description{ get; set;    }

        public Forecast[]? Forecast { get; set; }
    }
    public   async  Task GetWeatherForecast(  )
    {
         forecasts = await Http.GetFromJsonAsync<WeatherForecast>(Sity);


    }

    public class Forecast
    {
        public string? Temperature { get; set; }

        public string? Day   { get; set; }

        public string? Wind { get; set; }
    }
}
